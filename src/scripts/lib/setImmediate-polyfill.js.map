{"version":3,"sources":["../setImmediate-polyfill.js"],"names":[],"mappings":"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","file":"setImmediate-polyfill.js","sourcesContent":["/*! by Tom Thorogood <me@tomthorogood.co.uk> */\n/*! This work is licensed under the Creative Commons Attribution 4.0\nInternational License. To view a copy of this license, visit\nhttp://creativecommons.org/licenses/by/4.0/ or see LICENSE. */\n\n// setImmediate is a 0-delay setTimeout of sorts introduced\n// by MS and wrongly held back by other browsers\nwindow.setImmediate || !function (global) {\n\t// Get the global prototype to attach setImmediate to\n\tlet attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n\t\n\t// If we couldn't get the prototype or setTimeout wasn't attached\n\t// to the prototype we just attach to global\n\tattachTo && attachTo.setTimeout || (attachTo = global);\n\t\n\t// If the MS prefixed implementation exists, use it\n\tif (global.msSetImmediate) {\n\t\treturn attachTo.setImmediate = global.msSetImmediate, attachTo.clearImmediate = global.msClearImmediate;\n\t}\n\t\n\t// https://github.com/YuzuJS/setImmediate/blob/master/setImmediate.js\n\t// This checks if the current environment is Node.js\n\tif (global.process && Object.prototype.toString(global.process) === \"[object process]\") {\n\t\t// If it is we might be able to use timers\n\t\tlet timers = global.require(\"timers\");\n\t\t\n\t\t// If it implements setImmediate we use it\n\t\tif (timers && timers.setImmediate) {\n\t\t\treturn attachTo.setImmediate = timers.setImmediate, attachTo.clearImmediate = timers.clearImmediate;\n\t\t}\n\t\t\n\t\t// If it isn't we polyfill with nextTick which is\n\t\t// sufficiently similar\n\t\tif (global.process.nextTick) {\n\t\t\treturn attachTo.setImmediate = function (func, ...params) {\n\t\t\t\t// Invoke func with the params as passed into setImmediate\n\t\t\t\tglobal.process.nextTick(() => func(...params));\n\t\t\t}, attachTo.clearImmediate = function (immediateID) {\n\t\t\t\t// There is no id or way to stop nextTick\n\t\t\t\tthrow new Error(\"clearImmediate not implemented\");\n\t\t\t};\n\t\t}\n\t}\n\t\n\t// http://dbaron.org/log/20100309-faster-timeouts\n\t// https://github.com/YuzuJS/setImmediate/blob/master/setImmediate.js\n\t// https://github.com/kriskowal/q/blob/0428c15d2ffc8e874b4be3a50e92884ef8701a6f/q.js#L125-141\n\t// If we have messaging channels, or we have postMessage and this\n\t// isn't a WebWorker, we can use messaging\n\tif (global.MessageChannel || global.postMessage && !global.importScripts && (function () {\n\t\t// This checks if global.postMessage is asynchronous,\n\t\t// it has been known to be buggy and synchronous in\n\t\t// some browsers\n\t\tlet postMessageIsAsynchronous = true;\n\t\tlet oldOnMessage = global.onmessage;\n\t\tglobal.onmessage = function () { postMessageIsAsynchronous = false; };\n\t\tglobal.postMessage(\"\", \"*\");\n\t\tglobal.onmessage = oldOnMessage;\n\t\treturn postMessageIsAsynchronous;\n\t})()) {\n\t\t// A unique id prefix to ensure that ONLY valid messages are accepted\n\t\tlet messageName = `setImmediate-polyfill-${Math.random()}`.replace(\"0.\", \"\");\n\t\t\n\t\t// The numeric identifier of the next dispatched scrypt call\n\t\tlet immediateID = 1;\n\t\t\n\t\t// The timeout function and arguments, indexed by numeric identifier\n\t\tlet timeouts = { };\n\t\t\n\t\t// If a MessageChannel exists we can use it to avoid sending\n\t\t// messages to the browser which could cause interoperability\n\t\t// issues\n\t\tlet channel = global.MessageChannel && new global.MessageChannel();\n\t\t\n\t\t// We need to start port1 in order to receive messages sent\n\t\t// from port2\n\t\tchannel && channel.port1.start();\n\t\t\n\t\t// Add a handler to the message event of either the message\n\t\t// channel, if it exists, or global if it does not\n\t\t(channel && channel.port1 || global).addEventListener(\"message\", function (event) {\n\t\t\t// If event data is not a string, i.e. doesn't implement split,\n\t\t\t// we didn't send it\n\t\t\tif (!event.data || !event.data.split) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Split the identifier into the name and numeric id\n\t\t\tlet [name, immediateID] = event.data.split(\"$\");\n\t\t\t\n\t\t\t// If we are not using a MessageChannel check that the source\n\t\t\t// of the event was this window, also check the name is valid,\n\t\t\t// if either of these are not true, we didn't send it\n\t\t\tif (!channel && event.source !== global || name !== messageName) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// Prevent the event from propagating further\n\t\t\tevent.stopPropagation();\n\t\t\t\n\t\t\t// Retrieve the function and the arguments we will invoke\n\t\t\t// leaving func and params as null if the immediateID\n\t\t\t// does not exist in timeouts (because clearImmediate has\n\t\t\t// been called before we got here)\n\t\t\tlet [func, params] = timeouts[immediateID] || [ ];\n\t\t\t\n\t\t\t// Invoke the func with the appropriate parameters\n\t\t\tfunc && func(...params);\n\t\t\t\n\t\t\t// Clear func and params for GC\n\t\t\tfunc = params = null;\n\t\t\t\n\t\t\t// Remove key:immediateID from timeouts to ensure it's only\n\t\t\t// called once and to allow for GC\n\t\t\tdelete timeouts[immediateID];\n\t\t}, false);\n\t\t\n\t\treturn attachTo.setImmediate = function (func, ...params) {\n\t\t\t// Store the function and it's arguments in timeouts\n\t\t\ttimeouts[immediateID] = [func, params];\n\t\t\t\n\t\t\t// Post the message either using port2 of the MessageChannel\n\t\t\t// or on global if it's not available w/ the unique id\n\t\t\t// If the message is sent on global we dispatch it w/ a\n\t\t\t// targetOrigin of \"*\" (indicating no preference)\n\t\t\t(channel && channel.port2 || global).postMessage([messageName, immediateID].join(\"$\"), ...(channel ? [ ] : [\"*\"]));\n\t\t\t\n\t\t\t// We return a unique numeric id to identify the call\n\t\t\t// to setImmediate, this allows it to be cancelled\n\t\t\treturn immediateID++;\n\t\t}, attachTo.clearImmediate = function (immediateID) {\n\t\t\t// Delete the function and arguments associated\n\t\t\t// w/ identifier of immediateID\n\t\t\tdelete timeouts[immediateID];\n\t\t};\n\t}\n\t\n\t// Set setImmediate to prefixed or non-prefixed requestAnimationFrame\n\t// requestAnimationFrame dispatches at a later point in the event cycle\n\tattachTo.setImmediate = global.requestAnimationFrame || global.mozRequestAnimationFrame || global.webkitRequestAnimationFrame || global.msRequestAnimationFrame;\n\t\n\t// If requestAnimationFrame existed we end, setting clearImmediate\n\t// to cancelAnimationFrame\n\tif (attachTo.setImmediate) {\n\t\treturn attachTo.clearImmediate = global.cancelAnimationFrame || global.mozCancelAnimationFrame || global.webkitCancelAnimationFrame || global.msCancelAnimationFrame || global.webkitCancelRequestAnimationFrame;\n\t}\n\t\n\t// https://github.com/YuzuJS/setImmediate/blob/master/setImmediate.js\n\t// We can use a script tag and the readystatechange event on IE(?)\n\tif (global.document && \"onreadystatechange\" in global.document.getElementsByTagName(\"script\")[0]) {\n\t\t// The numeric identifier of the next dispatched scrypt call\n\t\tlet immediateID = 1;\n\t\t\n\t\t// A boolean value to allow clearImmediate to work,\n\t\t// indexed by numeric identifier\n\t\tlet timeouts = { };\n\t\t\n\t\treturn attachTo.setImmediate = function (func, ...params) {\n\t\t\t// Set true in timeouts for immediateID to indicate the func\n\t\t\t// should be invoked\n\t\t\ttimeouts[immediateID] = true;\n\t\t\t\n\t\t\t// Create a script tag that will be added to the DOM\n\t\t\tlet script = global.document.createElement(\"script\");\n\t\t\t\n\t\t\t// Add a handler for onreadystatechange\n\t\t\tscript.onreadystatechange = function () {\n\t\t\t\t// If the timeout has not been cancelled, call the func\n\t\t\t\t// w/ the arguments specified\n\t\t\t\ttimeouts[immediateID] && func(...params);\n\t\t\t\t\n\t\t\t\t// Remove key:immediateID from timeouts to ensure it's only called once \n\t\t\t\tdelete timeouts[immediateID];\n\t\t\t\t\n\t\t\t\t// Remove the handler to allow GC\n\t\t\t\tscript.onreadystatechange = null;\n\t\t\t\t\n\t\t\t\t// Remove the script tag from the DOM to ensure GC\n\t\t\t\tglobal.document.body.removeChild(script);\n\t\t\t\t\n\t\t\t\t// Nullify the script variable to allow GC\n\t\t\t\tscript = null;\n\t\t\t};\n\t\t\t\n\t\t\t// Add the script tag to the DOM to which begins loading\n\t\t\t// the tag which will invoke the readystatechange event\n\t\t\tglobal.document.body.appendChild(script);\n\t\t\t\n\t\t\t// Return a unique numeric id to identify the call\n\t\t\t// to setImmediate, this allows it to be cancelled\n\t\t\treturn immediateID++;\n\t\t}, attachTo.clearImmediate = function (immediateID) {\n\t\t\t// Remove key:immediateID from timeouts to prevent func from being called\n\t\t\tdelete timeouts[immediateID];\n\t\t};\n\t}\n\t\n\t// The worst fallback is setTimeout, although the delay is set to 0,\n\t// in reality this should have a ~20ms delay as this is an important\n\t// part of the spec\n\tattachTo.setImmediate = (func, ...params) => global.setTimeout(func, 0, ...params);\n\tattachTo.clearImmediate = global.clearTimeout;\n\t\n\t// Here we check if the arguments passed to setTimeout actually will be\n\t// passed to the callback, on older versions of IE(?) this check will fail\n\tglobal.setTimeout(function (arg) {\n\t\t// If the test fails, we wrap func in a closure that will invoke func w/\n\t\t// the arguments\n\t\targ || (attachTo.setImmediate = (func, ...params) => global.setTimeout(() => func(...params), 0));\n\t}, 0, true);\n}(this || window);"]}