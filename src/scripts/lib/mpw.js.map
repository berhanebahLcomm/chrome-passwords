{"version":3,"sources":["../../lib/mpw.js"],"names":[],"mappings":"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","file":"mpw.js","sourcesContent":["/*! by Tom Thorogood <me@tomthorogood.co.uk> */\n/*! This work is licensed under the Creative Commons Attribution 4.0\nInternational License. To view a copy of this license, visit\nhttp://creativecommons.org/licenses/by/4.0/ or see LICENSE. */\n\n// JS Web Crypto implementation of http://masterpasswordapp.com/algorithm.html\nclass MPW {\n\tconstructor(name, password, version = MPW.VERSION) {\n\t\t// The algorithm version\n\t\tthis.version = version;\n\t\t\n\t\t// Store name on the object, this is not used at all internally\n\t\tthis.name = name;\n\t\t\n\t\t// Check for valid algorithm versions\n\t\tif (version >= 0 && version <= MPW.VERSION) {\n\t\t\t// Calculate the master key which will be used to calculate\n\t\t\t// the password seed\n\t\t\tthis.key = MPW.calculateKey(name, password, version);\n\t\t} else {\n\t\t\tthis.key = Promise.reject(new Error(`Algorithm version ${version} not implemented`));\n\t\t}\n\t}\n\t\n\t// calculateKey takes ~ 1450.000ms to complete\n\tstatic calculateKey(name, password, version = MPW.VERSION) {\n\t\tif (!name || !name.length) {\n\t\t\treturn Promise.reject(new Error(\"Argument name not present\"));\n\t\t}\n\t\t\n\t\tif (!password || !password.length) {\n\t\t\treturn Promise.reject(new Error(\"Argument password not present\"));\n\t\t}\n\t\t\n\t\ttry {\n\t\t\t// Cache the number of characters in name for older buggy\n\t\t\t// versions of MPW\n\t\t\tlet nameCharLength = name.length;\n\t\t\t\n\t\t\t// Convert password string to a Uint8Array w/ UTF-8\n\t\t\tpassword = MPW.txtencoder.encode(password);\n\t\t\t\n\t\t\t// Convert name string to a Uint8Array w/ UTF-8\n\t\t\tname = MPW.txtencoder.encode(name);\n\t\t\t\n\t\t\t// Convert MPW.NS string to a Uint8Array w/ UTF-8\n\t\t\tlet NS = MPW.txtencoder.encode(MPW.NS);\n\t\t\t\n\t\t\t// Create salt array and a DataView representing it\n\t\t\tvar salt = new Uint8Array(\n\t\t\t\tNS.length\n\t\t\t\t+ 4/*sizeof(uint32)*/ + name.length\n\t\t\t);\n\t\t\tlet saltView = new DataView(salt.buffer, salt.byteOffset, salt.byteLength);\n\t\t\tlet i = 0;\n\t\t\t\n\t\t\t// Set salt[0,] to NS\n\t\t\tsalt.set(NS, i); i += NS.length;\n\t\t\t\n\t\t\tif (version < 3) {\n\t\t\t\t// Set data[i,i+4] to nameCharLength UINT32 in big-endian form\n\t\t\t\tsaltView.setUint32(i, nameCharLength, false/*big-endian*/); i += 4/*sizeof(uint32)*/;\n\t\t\t} else {\n\t\t\t\t// Set salt[i,i+4] to name.length UINT32 in big-endian form\n\t\t\t\tsaltView.setUint32(i, name.length, false/*big-endian*/); i += 4/*sizeof(uint32)*/;\n\t\t\t}\n\t\t\t\n\t\t\t// Set salt[i,] to name\n\t\t\tsalt.set(name, i); i += name.length;\n\t\t} catch (e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t\t\n\t\t// Derive the master key w/ scrypt\n\t\t// why is buflen 64*8==512 and not 32*8==256 ?\n\t\tlet key = window.scrypt(password, salt, 32768/*= n*/, 8/*= r*/, 2/*= p*/, 64/*= buflen*/);\n\t\t\n\t\t// If the Web Crypto API is supported import the key, otherwise return\n\t\treturn window.crypto.subtle\n\t\t\t? key.then(\n\t\t\t\t// Import the key into WebCrypto to use later with sign while\n\t\t\t\t// being non-extractable\n\t\t\t\tkey => window.crypto.subtle.importKey(\"raw\", key, {\n\t\t\t\t\tname: \"HMAC\",\n\t\t\t\t\thash: {\n\t\t\t\t\t\tname: \"SHA-256\"\n\t\t\t\t\t}\n\t\t\t\t}, false/*not extractable*/, [ \"sign\" ])/*= key*/\n\t\t\t)\n\t\t\t: key;\n\t}\n\t\n\t// calculateSeed takes ~ 3.000ms to complete + the time of calculateKey once\n\tcalculateSeed(site, counter = 1, context = null, NS = MPW.NS) {\n\t\tif (!site) {\n\t\t\treturn Promise.reject(new Error(\"Argument site not present\"));\n\t\t}\n\t\t\n\t\tif (counter < 1 || counter > 4294967295/*Math.pow(2, 32) - 1*/) {\n\t\t\treturn Promise.reject(new Error(\"Argument counter out of range\"));\n\t\t}\n\t\t\n\t\ttry {\n\t\t\t// Cache the number of characters in site for older buggy\n\t\t\t// versions of MPW\n\t\t\tlet siteCharLength = site.length;\n\t\t\t\n\t\t\t// Convert salt string to a Uint8Array w/ UTF-8\n\t\t\tsite = MPW.txtencoder.encode(site);\n\t\t\t\n\t\t\t// Convert NS string to a Uint8Array w/ UTF-8\n\t\t\tNS = MPW.txtencoder.encode(NS);\n\t\t\t\n\t\t\tif (context) {\n\t\t\t\t// Convert context string to a Uint8Array w/ UTF-8\n\t\t\t\tcontext = MPW.txtencoder.encode(context);\n\t\t\t}\n\t\t\t\n\t\t\t// Create data array and a DataView representing it\n\t\t\tvar data = new Uint8Array(\n\t\t\t\tNS.length\n\t\t\t\t+ 4/*sizeof(uint32)*/ + site.length\n\t\t\t\t+ 4/*sizeof(int32)*/\n\t\t\t\t+ (context\n\t\t\t\t\t? 4/*sizeof(uint32)*/ + context.length\n\t\t\t\t\t: 0)\n\t\t\t);\n\t\t\tlet dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);\n\t\t\tlet i = 0;\n\t\t\t\n\t\t\t// Set data[0,] to NS\n\t\t\tdata.set(NS, i); i += NS.length;\n\t\t\t\n\t\t\tif (this.version < 2) {\n\t\t\t\t// Set data[i,i+4] to siteCharLength UINT32 in big-endian form\n\t\t\t\tdataView.setUint32(i, siteCharLength, false/*big-endian*/); i += 4/*sizeof(uint32)*/;\n\t\t\t} else {\n\t\t\t\t// Set data[i,i+4] to site.length UINT32 in big-endian form\n\t\t\t\tdataView.setUint32(i, site.length, false/*big-endian*/); i += 4/*sizeof(uint32)*/;\n\t\t\t}\n\t\t\t\n\t\t\t// Set data[i,] to site\n\t\t\tdata.set(site, i); i += site.length;\n\t\t\t\n\t\t\t// Set data[i,i+4] to counter INT32 in big-endian form\n\t\t\tdataView.setInt32(i, counter, false/*big-endian*/); i += 4/*sizeof(int32)*/;\n\t\t\t\n\t\t\tif (context) {\n\t\t\t\t// Set data[i,i+4] to context.length UINT32 in big-endian form\n\t\t\t\tdataView.setUint32(i, context.length, false/*big-endian*/); i += 4/*sizeof(uint32)*/;\n\t\t\t\t\n\t\t\t\t// Set data[i,] to context\n\t\t\t\tdata.set(context, i); i += context.length;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t\t\n\t\t// If the Web Crypto API is supported use it, otherwise rely on crypto-js\n\t\tif (window.crypto.subtle) {\n\t\t\treturn this.key.then(\n\t\t\t\t// Sign data using HMAC-SHA-256 w/ this.key\n\t\t\t\tkey => window.crypto.subtle.sign({\n\t\t\t\t\tname: \"HMAC\",\n\t\t\t\t\thash: {\n\t\t\t\t\t\tname: \"SHA-256\"\n\t\t\t\t\t}\n\t\t\t\t}, key, data)/*= seed*/\n\t\t\t).then(\n\t\t\t\t// Convert the seed to Uint8Array from ArrayBuffer\n\t\t\t\tseed => new Uint8Array(seed)/*= seed*/\n\t\t\t);\n\t\t} else {\n\t\t\treturn this.key.then(function (key) {\n\t\t\t\t// Create crypto-js WordArrays from Uint8Arrays data and key\n\t\t\t\tdata = CryptoJS.lib.WordArray.create(data);\n\t\t\t\tkey  = CryptoJS.lib.WordArray.create(key);\n\t\t\t\t\n\t\t\t\t// Sign data using HMAC-SHA-256 w/ key\n\t\t\t\treturn CryptoJS.HmacSHA256(data, key)/*= seed*/;\n\t\t\t}).then(function (hash) {\n\t\t\t\t// Create seed array and a DataView representing it\n\t\t\t\tlet seed     = new Uint8Array(hash.words.length * 4/*sizeof(int32)*/);\n\t\t\t\tlet seedView = new DataView(seed.buffer, seed.byteOffset, seed.byteLength);\n\t\t\t\t\n\t\t\t\t// Loop over hash.words which are INT32\n\t\t\t\tfor (let i = 0; i < hash.words.length; i++) {\n\t\t\t\t\t// Set seed[i*4,i*4+4] to hash.words[i] INT32 in big-endian form\n\t\t\t\t\tseedView.setInt32(i * 4/*sizeof(int32)*/, hash.words[i], false/*big-endian*/);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Return the seed Uint8Array\n\t\t\t\treturn seed;\n\t\t\t});\n\t\t}\n\t}\n\t\n\t// generate takes ~ 0.200ms to complete + the time of calculateSeed\n\tgenerate(site, counter = 1, context = null, template = \"long\", NS = MPW.NS) {\n\t\t// Does the requested template exist?\n\t\tif (!(template in MPW.templates)) {\n\t\t\treturn Promise.reject(new Error(\"Argument template invalid\"));\n\t\t}\n\t\t\n\t\t// Calculate the seed\n\t\tlet seed = this.calculateSeed(site, counter, context, NS);\n\t\t\n\t\tif (this.version < 1) {\n\t\t\t// Convert seed from host byte order to network byte\n\t\t\t// to be compatible with v0 of MPW\n\t\t\t// Follows the implementation at https://github.com/...\n\t\t\t// Lyndir/MasterPassword/blob/master/MasterPassword/...\n\t\t\t// Java/masterpassword-algorithm/src/main/java/com/...\n\t\t\t// lyndir/masterpassword/MasterKeyV0.java#L105\n\t\t\tseed = seed.then(function (seedBytes) {\n\t\t\t\tvar seed = new Uint16Array(seedBytes.length);\n\t\t\t\t\n\t\t\t\tfor (var i = 0; i < seed.length; i++) {\n\t\t\t\t\tseed[i] = (seedBytes[i] > 127 ? 0x00ff : 0x0000) | (seedBytes[i] << 8);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn seed;\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn seed.then(function (seed) {\n\t\t\t// Find the selected template array\n\t\t\ttemplate = MPW.templates[template];\n\t\t\t\n\t\t\t// Select the specific template based on seed[0]\n\t\t\ttemplate = template[seed[0] % template.length];\n\t\t\t\n\t\t\t// Split the template string (e.g. xxx...xxx)\n\t\t\treturn template.split(\"\").map(function (c, i) {\n\t\t\t\t// Use MPW.passchars to map the template string (e.g. xxx...xxx)\n\t\t\t\t// to characters (e.g. c -> bcdfghjklmnpqrstvwxyz)\n\t\t\t\tlet chars = MPW.passchars[c];\n\t\t\t\t\n\t\t\t\t// Select the character using seed[i + 1]\n\t\t\t\treturn chars[seed[i + 1] % chars.length];\n\t\t\t}).join(\"\");\n\t\t})/*= password*/;\n\t}\n\t\n\t// generate a password with the password namespace\n\tgeneratePassword(site, counter = 1, template = \"long\") {\n\t\treturn this.generate(site, counter, null, template, MPW.PasswordNS);\n\t}\n\t\n\t// generate a username with the login namespace\n\tgenerateLogin(site, counter = 1, template = \"name\") {\n\t\treturn this.generate(site, counter, null, template, MPW.LoginNS);\n\t}\n\t\n\t// generate a security answer with the answer namespace\n\tgenerateAnswer(site, counter = 1, context = \"\", template = \"phrase\") {\n\t\treturn this.generate(site, counter, context, template, MPW.AnswerNS);\n\t}\n\t\n\tinvalidate() {\n\t\t// Replace this.key w/ a Promise.reject\n\t\t// Preventing all future access\n\t\tthis.key = Promise.reject(new Error(\"invalid state\"));\n\t}\n\t\n\tstatic test() {\n\t\t// Pretty simple test here\n\t\treturn new MPW(\"user\", \"password\").generate(\"example.com\", 1, null, \"long\", MPW.NS).then(function (password) {\n\t\t\tconsole.assert(password === \"ZedaFaxcZaso9*\", `Self-test failed; expected: ZedaFaxcZaso9*; got: ${password}`);\n\t\t\treturn password === \"ZedaFaxcZaso9*\"\n\t\t\t\t? Promise.resolve()\n\t\t\t\t: Promise.reject(new Error(`Self-test failed; expected: ZedaFaxcZaso9*; got: ${password}`));\n\t\t});\n\t}\n}\n\n// A TextEncoder in UTF-8 to convert strings to `Uint8Array`s\nMPW.txtencoder = new TextEncoder;\n\n// The latest version of MPW supported\nMPW.VERSION = 3;\n\n// The namespace used in calculateKey\nMPW.NS = \"com.lyndir.masterpassword\";\n\n// The namespaces used in calculateSeed\nMPW.PasswordNS = \"com.lyndir.masterpassword\";\nMPW.LoginNS    = \"com.lyndir.masterpassword.login\";\nMPW.AnswerNS   = \"com.lyndir.masterpassword.answer\";\n\n// The templates that passwords may be created from\n// The characters map to MPW.passchars\nMPW.templates = {\n\tmaximum: [\n\t\t\"anoxxxxxxxxxxxxxxxxx\",\n\t\t\"axxxxxxxxxxxxxxxxxno\"\n\t],\n\tlong: [\n\t\t\"CvcvnoCvcvCvcv\",\n\t\t\"CvcvCvcvnoCvcv\",\n\t\t\"CvcvCvcvCvcvno\",\n\t\t\"CvccnoCvcvCvcv\",\n\t\t\"CvccCvcvnoCvcv\",\n\t\t\"CvccCvcvCvcvno\",\n\t\t\"CvcvnoCvccCvcv\",\n\t\t\"CvcvCvccnoCvcv\",\n\t\t\"CvcvCvccCvcvno\",\n\t\t\"CvcvnoCvcvCvcc\",\n\t\t\"CvcvCvcvnoCvcc\",\n\t\t\"CvcvCvcvCvccno\",\n\t\t\"CvccnoCvccCvcv\",\n\t\t\"CvccCvccnoCvcv\",\n\t\t\"CvccCvccCvcvno\",\n\t\t\"CvcvnoCvccCvcc\",\n\t\t\"CvcvCvccnoCvcc\",\n\t\t\"CvcvCvccCvccno\",\n\t\t\"CvccnoCvcvCvcc\",\n\t\t\"CvccCvcvnoCvcc\",\n\t\t\"CvccCvcvCvccno\"\n\t],\n\tmedium: [\n\t\t\"CvcnoCvc\",\n\t\t\"CvcCvcno\"\n\t],\n\tbasic: [\n\t\t\"aaanaaan\",\n\t\t\"aannaaan\",\n\t\t\"aaannaaa\"\n\t],\n\tshort: [\n\t\t\"Cvcn\"\n\t],\n\tpin: [\n\t\t\"nnnn\"\n\t],\n\tname: [\n\t\t\"cvccvcvcv\"\n\t],\n\tphrase: [\n\t\t\"cvcc cvc cvccvcv cvc\",\n\t\t\"cvc cvccvcvcv cvcv\",\n\t\t\"cv cvccv cvc cvcvccv\"\n\t]\n};\n\n// The password character mapping\n// c in template becomes bcdfghjklmnpqrstvwxyz\nMPW.passchars = {\n\tV: \"AEIOU\",\n\tC: \"BCDFGHJKLMNPQRSTVWXYZ\",\n\tv: \"aeiou\",\n\tc: \"bcdfghjklmnpqrstvwxyz\",\n\tA: \"AEIOUBCDFGHJKLMNPQRSTVWXYZ\",\n\ta: \"AEIOUaeiouBCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\",\n\tn: \"0123456789\",\n\to: \"@&%?,=[]_:-+*$#!'^~;()/.\",\n\tx: \"AEIOUaeiouBCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz0123456789!@#$%^&*()\",\n\t\" \": \" \"\n};"]}