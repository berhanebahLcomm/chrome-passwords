{"version":3,"file":"/home/tom/git/mpw-js/es5/scrypt.js","sources":["/home/tom/git/mpw-js/scrypt.js","@traceur/generated/TemplateParser/0"],"names":[],"mappings":"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","sourceRoot":"/home/tom/git/mpw-js/es5/","sourcesContent":["/*! by Tom Thorogood <me@tomthorogood.co.uk> */\n/*! This work is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/ or see LICENSE. */\n\nwindow.scrypt = function () {\n\t// 512MiB, the default 32MiB caused errors for unknown reasons\n\tconst SCRYPT_MEMORY = 512 * 1024 * 1024;\n\t\n\ttry {\n\t\t// Get all the <script> tags the latest one is used to resolve\n\t\t// scrypt-asm.js, it will be the currently executing <script> tag,\n\t\t// so long as defer and async were NOT used\n\t\tlet scripts = document.getElementsByTagName(\"script\");\n\t\t\n\t\t// Create a WebWorker using a blob: url create from a function converted toString\n\t\t// This saves uses a third-file for scrypt but is slightly hack-y\n\t\t// It is a self-invoking anonymous function\n\t\tlet scryptwrkr = new Worker(URL.createObjectURL(new Blob([ (\"!\" + function () {\n\t\t\t// 512MiB, the default 32MiB caused errors for unknown reasons\n\t\t\t// Have to redeclare here as definition above is not accessible\n\t\t\t// from WebWorker\n\t\t\tconst SCRYPT_MEMORY = 512 * 1024 * 1024;\n\t\t\t\n\t\t\t// Import scrypt-asm.js which is scrypt.c compiled w/ Emscripten\n\t\t\t// {{scrypt-asm.js}} is a placeholder for the full path to scrypt-asm.js\n\t\t\t// This is hack-y because blob: urls (obviously) cannot resolve\n\t\t\t// relative paths from a http: resource\n\t\t\timportScripts(\"{{scrypt-asm.js}}\");\n\t\t\t\n\t\t\t// Create the Emscripten factory\n\t\t\tlet scrypt_module = scrypt_module_factory(SCRYPT_MEMORY);\n\t\t\t\n\t\t\t// Rather than import traceur-runtime.js w/ importScripts just polyfill it\n\t\t\t// Yuck\n\t\t\tconst $traceurRuntime = { assertObject: a => a };\n\t\t\t\n\t\t\t// Wait for incoming messages\n\t\t\t// Pull out the needed values from the e argument\n\t\t\tthis.addEventListener(\"message\", function ({data: {id, passwd, salt, n, r, p, buflen}}) {\n\t\t\t\ttry {\n\t\t\t\t\t// Invoke the Emscripten compiled crypto_scrypt routine\n\t\t\t\t\tlet data = scrypt_module.crypto_scrypt(passwd, salt, n, r, p, buflen);\n\t\t\t\t\t\n\t\t\t\t\t// Send the data back to the DOM transferring ownership\n\t\t\t\t\t// of data to the DOM\n\t\t\t\t\tthis.postMessage({\n\t\t\t\t\t\tid: id,\n\t\t\t\t\t\t\n\t\t\t\t\t\tdata: data\n\t\t\t\t\t}, [ data.buffer ]);\n\t\t\t\t} catch(err) {\n\t\t\t\t\t// Send the error back to the DOM\n\t\t\t\t\tthis.postMessage({\n\t\t\t\t\t\tid: id,\n\t\t\t\t\t\t\n\t\t\t\t\t\terr: err\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, false);\n\t\t} + \"()\").replace(\"{{scrypt-asm.js}}\", window.SCRYPTASM_PATH || (scripts[scripts.length - 1].src + \"/../scrypt-asm.js\")) ], { type: \"application/javascript\" })));\n\t\t// This would instead create a WebWorker using a third-file\n\t\t//let scryptwrkr = new Worker(\"scrypt-worker.js\");\n\t\t\n\t\t// The numeric identifier of the next dispatched scrypt call\n\t\tlet scryptID = 1;\n\t\t\n\t\t// The Promise callbacks, indexed by numeric identifier\n\t\tlet scryptcbs = { };\n\t\t\n\t\t// A unique id prefix to ensure that ONLY valid messages are accepted\n\t\tlet messageName = (\"scrypt-\" + Math.random()).replace(\"0.\", \"\");\n\t\t\n\t\t// Add a message event listener for worker responses\n\t\t// Pull out the needed values from the e argument\n\t\tscryptwrkr.addEventListener(\"message\", function ({data: {id, data, err}}) {\n\t\t\t// Split the identifier into the name and numeric id\n\t\t\tlet [name, scryptID] = id.split(\"$\");\n\t\t\t\n\t\t\t// Check the name is valid, if it's not we didn't send it\n\t\t\tif (name === messageName) {\n\t\t\t\t// Retrieve the resolve and reject callbacks for the promise\n\t\t\t\tlet [resolve, reject] = scryptcbs[scryptID];\n\t\t\t\t\n\t\t\t\t// If we were sent data it didn't throw an error, if not...\n\t\t\t\tdata ? resolve(data) : reject(err);\n\t\t\t\t\n\t\t\t\t// Delete references to the callbacks now we've used them\n\t\t\t\tdelete scryptcbs[scryptID];\n\t\t\t}\n\t\t});\n\t\t\n\t\t// This is the scrypt function\n\t\t// It returns a promise which will resolve when the worker responds\n\t\treturn (passwd, salt, n, r, p, buflen) => new Promise(function (resolve, reject) {\n\t\t\t// Store the callbacks\n\t\t\t// These will be invoked from the worker message handler\n\t\t\tscryptcbs[scryptID] = [resolve, reject];\n\t\t\t\n\t\t\t// Send the worker a message w/ a unique id and all arguments,\n\t\t\t// transferring ownership of passwd and salt to the worker\n\t\t\tscryptwrkr.postMessage({\n\t\t\t\tid: [messageName, scryptID++].join(\"$\"),\n\t\t\t\t\n\t\t\t\tpasswd: passwd,\n\t\t\t\tsalt: salt,\n\t\t\t\tn: n,\n\t\t\t\tr: r,\n\t\t\t\tp: p,\n\t\t\t\tbuflen: buflen\n\t\t\t}, [ passwd.buffer, salt.buffer ]);\n\t\t});\n\t} catch(e) {\n\t\t// If the WebWorker code above fails we fallback\n\t\tconsole.error(e);\n\t\t\n\t\t// This will hold the Emscripten factory\n\t\tlet scrypt_module = null;\n\t\t\n\t\t// Create a new async script tag to add to the DOM\n\t\t// This will 'import' scrypt_module_factory\n\t\tlet script = document.createElement(\"script\");\n\t\tscript.src = window.SCRYPTASM_PATH || \"scrypt-asm.js\", script.async = true;\n\t\t\n\t\t// Add an event handler to the script load event to\n\t\t// create the factory as soon as we possibly can\n\t\tscript.addEventListener(\"load\", function () {\n\t\t\t// Only if it hasn't already been created\n\t\t\tif (!scrypt_module) {\n\t\t\t\t// Create the factory\n\t\t\t\tscrypt_module = scrypt_module_factory(SCRYPT_MEMORY);\n\t\t\t}\n\t\t}, false);\n\t\t\n\t\t// Add the script tag to the DOM\n\t\t// This begins loading scrypt-asm.js\n\t\tdocument.body.appendChild(script);\n\t\t\n\t\t// This is the scrypt function\n\t\t// It returns a promise which will resolve asynchronously\n\t\treturn (passwd, salt, n, r, p, buflen) => new Promise(function (resolve, reject) {\n\t\t\t// setImmediate (a 0-delay setTimeout of sorts) is needed\n\t\t\t// here so that this code is asynchronous and will not block\n\t\t\t// the UI thread\n\t\t\twindow.setImmediate(function () {\n\t\t\t\t// If the factory hasn't been created yet (the load event didn't fire)\n\t\t\t\t// we create it here, if it has loaded that is\n\t\t\t\tif (!scrypt_module) {\n\t\t\t\t\t// Has scrypt-asm.js been loaded yet?\n\t\t\t\t\tif (!window.scrypt_module_factory) {\n\t\t\t\t\t\treturn reject(new Error(\"scrypt-asm.js not loaded\"));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Create the factory\n\t\t\t\t\tscrypt_module = scrypt_module_factory(SCRYPT_MEMORY);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Invoke the Emscripten compiled crypto_scrypt routine\n\t\t\t\t// resolving the promise w/ the result\n\t\t\t\tresolve(scrypt_module.crypto_scrypt(passwd, salt, n, r, p, buflen));\n\t\t\t});\n\t\t});\n\t}\n}();","$__placeholder__0[$traceurRuntime.toProperty($__placeholder__1)]"]}